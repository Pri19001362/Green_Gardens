@page
@model Green_Gardens.Pages.Graphs.GraphModel
@{
    ViewData["Title"] = "Product Stock Graph";
}

<h2>Graphs</h2>

<div>
	<h3>Expected stock quantity</h3>
	<canvas id="stockGraph"></canvas>
</div>

<div>
	<h3>Price against stock quantity</h3>
	<canvas id="ExpectedStock"></canvas>
</div>

<div>
	<h3>Customer Loyalty Points</h3>
	<canvas id="LoyaltyPoints"></canvas>
</div>



@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		var ctx = document.getElementById('stockGraph').getContext('2d');
		var tasksData = @Html.Raw(Model.ProductJson);
		var tasksGraph = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: tasksData.map(t => new String(t.Name).toString()),
				datasets: [
					{
					label: 'Current Stock',
					data: tasksData.map(t => t.Stock),
					backgroundColor: 'rgba(0, 255, 0, 0.5)',
					borderColor: 'rgba(0, 255, 0, 1)',
					borderWidth: 1
				},
				{
					label: 'Expected Stock',
					data: tasksData.map(t => t.ExpectedStock),
					backgroundColor: 'rgba(255, 0, 0, 0.5)',
					borderColor: 'rgba(255, 0, 0, 1)',
					borderWidth: 1
				}
				]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				}
			}
		});
	</script>



	<!--New Graph-->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		var ctx = document.getElementById('ExpectedStock').getContext('2d');
		var tasksData = @Html.Raw(Model.ProductJson);
		var tasksGraph = new Chart(ctx, {
			type: 'radar',
			data: {
				labels: tasksData.map(t => t.Name),
				datasets: [
					{
					label: 'Price',
					data: tasksData.map(t => t.Price),
					backgroundColor: 'rgba(54, 162, 235, 0.5)',
					borderColor: 'rgba(54, 162, 235, 1)',
					borderWidth: 1
				},
				{
					label: 'Stock',
					data: tasksData.map(t => t.Stock),
					backgroundColor: 'rgba(249, 82, 16, 0.5)',
					borderColor: 'rgba(249, 82, 16, 1)',
					borderWidth: 1
				}
				]
			},
			options: {
				scales: {
				}
			}
		});
	</script>

	<!--New Graph-->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		var ctx = document.getElementById('LoyaltyPoints').getContext('2d');
		var tasksData = @Html.Raw(Model.CustomerJson);
		var tasksGraph = new Chart(ctx, {
			type: 'polarArea',
			data: {
				labels: tasksData.map(t => t.FirstName),
				datasets: [
					{
						label: 'Loyalty Points',
						data: tasksData.map(t => t.LoyaltyPoints),
						backgroundColor: 'rgba(54, 162, 235, 0.5)',
						borderColor: 'rgba(54, 162, 235, 1)',
						borderWidth: 1
					}
				]
			},
			options: {
				scales: {
					r: {
						pointLabels: {
							display: true,
							centerPointLabels: true,
							font: {
								size: 18
							}
						}
					}
				}
			}
		});
	</script>


}

<div>
    <h2>Top 5 Most Expensive Products</h2>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Current Stock</th>
            <th>Expected Stock</th>
        </tr>
    </thead>
    <tbody>
		@foreach (var item in Model.Product.OrderByDescending(p=>p.Price).Take(5))
		{
			<tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price.ToString()</td>
                <td>@item.Stock.ToString()</td>
                <td>@item.ExpectedStock.ToString()</td>

            </tr>
		}
	</tbody>
</table>

<div>
    <h2>Top 5 Products with the lowest stock</h2>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Current Stock</th>
            <th>Expected Stock</th>
        </tr>
    </thead>
    <tbody>
		@foreach (var item in Model.Product.OrderBy(p=>p.Stock).Take(5))
		{
			<tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price.ToString()</td>
                <td>@item.Stock.ToString()</td>
                <td>@item.ExpectedStock.ToString()</td>

            </tr>
		}
	</tbody>
</table>

<div>
    <h2>Top 5 Customers with the most loyalty points</h2>
</div>
<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Loyalty Points</th>
        </tr>
    </thead>
    <tbody>
		@foreach (var item in Model.Customer.OrderByDescending(l=>l.LoyaltyPoints).Take(5).Where(n => n.IsAdmin == false ) )
		{
			<tr>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Email.ToString()</td>
                <td>@item.LoyaltyPoints.ToString()</td>

            </tr>
		}
	</tbody>
</table>
@page
@model Green_Gardens.Pages.AdminModel
@{
}
@{
    ViewData["Title"] = "Admin Product Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome Admin</h1>
    <p>Create, edit and delete products</p>
    <!--this button is only viewable if the user is an admin-->
    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
    {
        <a asp-page="Create" class="btn btn-primary"> Add Item</a>
    }

    @if (User.Identity.IsAuthenticated)
    {
        <form method="get" asp-page="/Logout">
            <button type="submit" class="btn btn-warning">Logout</button>
        </form>
    }
</div>

<!--Products table-->
<div>
    <h2>Products</h2>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Current Stock</th>
            <th>Expected Stock</th>
            <th>Edit/Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Product)
        {
            //checks the current stock against the expected stock
            @if (@item.Stock < @item.ExpectedStock)
            {
                //will appear for products that are below stock
                <tr style="background-color:red; color:white;">
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price.ToString()</td>
                <td>@item.Stock.ToString()</td>
                <td>@item.ExpectedStock.ToString()</td>

                <td>
                    <!--Only admins can edit or delete products-->
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                    {
                        <a asp-page="/Edit" asp-route-id="@item.ProductId" class="btn btn-primary">Edit</a>
                        <a asp-page="/Delete" asp-route-id="@item.ProductId" class="btn btn-danger">Delete</a>
                    }
                </td>

                </tr>
            }
            else
            {
                //red alert will not display for products that have higher current stock
                <tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price.ToString()</td>
                <td>@item.Stock.ToString()</td>
                <td>@item.ExpectedStock.ToString()</td>

                <td>
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                    {
                        <a asp-page="/Edit" asp-route-id="@item.ProductId" class="btn btn-primary">Edit</a>
                        <a asp-page="/Delete" asp-route-id="@item.ProductId" class="btn btn-danger">Delete</a>
                    }
                </td>

            </tr>
            }
            
        }
    </tbody>
</table>

<!--will only display products that have lower current stock-->
<div>
    <h3>Products below current stock</h3>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Current Stock</th>
            <th>Expected Stock</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model.Product)
        {
            //admins can view specific stock as opposed to all of them
            @if (@item.Stock < @item.ExpectedStock)
            {
                <tr>
                <td>@item.Name</td>
                <td>@item.Stock.ToString()</td>
                <td>@item.ExpectedStock.ToString()</td>

                </tr>
            }
        }
    </tbody>

</table>
</div>


<!--displays all customers-->
<div>
    <h3>Customers</h3>
<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Loyalty Points</th>
            <th>Admin</th>
        </tr>
    </thead>

    <tbody>
            @foreach (var customer in Model.Customer)
            {
                //checks if th customer is an admin and highlights it
                @if(@customer.IsAdmin == true)
                {
                    <tr style="background-color: green;">
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.Email</td>
                        <td>@customer.LoyaltyPoints</td>
                        <td>@customer.IsAdmin</td>

                        <td>
                            <!--User.IsInRole("Admin") is a claim that checks admin authourity-->
                            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                            {
                                //only admins can edit or delet ciustomers
                                <a asp-page="/CustomerEdit" asp-route-id="@customer.CustomerId" class="btn btn-primary">Edit</a>
                                <a asp-page="/CustomerDelete" asp-route-id="@customer.CustomerId" class="btn btn-danger">Delete</a>
                            }
                        </td>

                    </tr>

                }
                else
                {
                    <tr>
                        <!--info to be displayed-->
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.Email</td>
                        <td>@customer.LoyaltyPoints</td>
                        <td>@customer.IsAdmin</td>

                        <td>
                            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                            {
                                <a asp-page="/CustomerEdit" asp-route-id="@customer.CustomerId" class="btn btn-primary">Edit</a>
                                <a asp-page="/CustomerDelete" asp-route-id="@customer.CustomerId" class="btn btn-danger">Delete</a>
                            }
                        </td>
                    </tr>
                }

            }
    </tbody>

</table>
</div>


<!--Orders table-->
<div>
    <h2>Orders</h2>
</div>
<table class="table">
    <thead>
        <tr>
            <!--order information that admins will see-->
            <th>Order Id</th>
            <th>Product Id</th>
            <th>Product Name</th>
            <th>Product Price</th>
            <th>Product Quantity</th>
            <th>Order Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in Model.Order)
        {
            //can display product information thanks to the foreign key in the order table
                <tr>
                <td>@order.Id</td>
                <td>@order.ProductId</td>
                <td>@order.Product.Name</td>
                <td>@order.Product.Price.ToString()</td>
                <td>@order.Product.Stock.ToString()</td>
                <td>@order.Quantity.ToString()</td>
                </tr>
        }
    </tbody>
</table>